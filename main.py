# –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import requests
import time
from datetime import datetime
import telebot
import sqlite3
import difflib
import json

# –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø–∏—Ü—Ü—É
from config import token, my_login, api_access_token
from functions import payment_history_last, similarity, balance, send_mobile, fibonacci
from telebot import types

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(token)

say_ban = ["–±–∞–Ω", "–∑–∞–±–∞–Ω–∏—Ç—å", "!–±–∞–Ω", "–º—É—Ç", "!–º—É—Ç", "!ban", "ban", "mute", "!mute"]
say_unban = ["—Ä–∞–∑–±–∞–Ω", "—Ä–∞–∑–∞–±–∞–Ω–∏—Ç—å", "!—Ä–∞–∑–±–∞–Ω", "—Ä–∞–∑–º—É—Ç", "!—Ä–∞–∑–º—É—Ç", "!unban", "unban", "unmute", "!unmute"]



@bot.message_handler(commands=['qiwi'])
def start_message(message):
    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å—á—ë—Ç–µ –∫–∏–≤–∏
    last_payments = payment_history_last(my_login, api_access_token, '20', '', '')

    connection = sqlite3.connect("users.db")
    cursor = connection.cursor()

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 200 –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö db_id_list
    cursor.execute("SELECT id FROM payments ORDER BY date DESC LIMIT 200")
    results = cursor.fetchall()

    db_id_list = []
    for i in range(len(results)):
        # –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤. –ò–∑ ('19038863417') –¥–µ–ª–∞–µ–º 19038863417
        db_id = ''.join(results[i])
        db_id_list.append(db_id)

    print(db_id_list)

    y = len(last_payments['data']) - 1
    for i in last_payments['data']:
        pay_id = last_payments['data'][y]['txnId']
        pay_date = last_payments['data'][y]['date']
        pay_sum = last_payments['data'][y]['total']['amount']
        pay_comment = last_payments['data'][y]['comment']
        pay_provider = last_payments['data'][y]['provider']['shortName']
        pay_status = last_payments['data'][y]['status']
        pay_info = [(pay_id, pay_date, pay_sum, pay_comment, pay_provider, pay_status)]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–π–¥–∏ –æ–ø–ª–∞—Ç—ã –≤ –ë–î. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è
        if str(pay_id) in db_id_list:
            print(f"–≠—Ç–æ—Ç –∞–π–¥–∏ {pay_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ—ç—Ç–æ–º—É –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
            pass
        else:
            cursor.executemany("INSERT INTO payments VALUES (?,?,?,?,?,?)", pay_info)
            print(f"–í–Ω–æ—Å–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {pay_info}")
            connection.commit()

        y -= 1


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π /start –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(True)
    markup.row('üåª', 'üí∞', 'üì≤', 'üé≤')
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, " + message.chat.first_name + " üßü‚Äç‚ôÇÔ∏è", reply_markup=markup)

    bot.send_message(message.chat.id, '–í–æ—Ç –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç: \n'
                                      'üñ•   /dreamdesk\n'
                                      'üí∞   /balance\n'
                                      'üì≤   /payphone\n'
                                      'üìñ   /psalazh'
                     )
    # –ü–æ–ª—É—á–∞–µ–º Telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–µ–≤–∏–¥–Ω–æ, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω —Å–≤–æ–π)
    user_id = message.chat.id

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∞–Ω–æ–Ω!')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    connection = sqlite3.connect("users.db")
    cursor = connection.cursor()

    sql = "SELECT * FROM white_list WHERE id=?"
    cursor.execute(sql, [user_id])
    fetch_id = cursor.fetchone()
    print(f"–§–µ—Ç—á –∞–π–¥–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç {fetch_id} .")
    connection.commit()

    if fetch_id is None:
        user_info = [(user_id, message.from_user.username, message.from_user.first_name, "True",
                      message.from_user.language_code)]
        cursor.executemany("INSERT INTO white_list VALUES (?,?,?,?,?)", user_info)
        connection.commit()
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def all_messages(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤. –ï—Å–ª–∏ –µ–≥–æ rules = False, —Ç–æ ignore
    connection = sqlite3.connect("users.db")
    cursor = connection.cursor()

    sql = "SELECT rules FROM white_list WHERE id=?"
    cursor.execute(sql, [message.chat.id])
    fetch_id = cursor.fetchone()
    print(f"–§–µ—Ç—á –∞–π–¥–∏ –∏—â–µ—Ç rules —é–∑–µ—Ä–∞ {fetch_id} .")
    connection.commit()

    if fetch_id is None:
        fetch_id = '000000000'

    str_fetch_id = ''.join(fetch_id)
    print(str_fetch_id)

    if str_fetch_id == "True":
        user_id = message.chat.id

        m_list = []
        total_say_ban = 0

        for i in range(len(say_ban)):
            index_diff = similarity(message.text.split('@')[0].strip(), say_ban[i])
            m_list.append(index_diff)
            total_say_ban = max(m_list)

        if (total_say_ban > 0.80) and message.chat.id == 441945234:
            user_name = message.text.split('@')[1].strip()
            print(total_say_ban)

            # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>
            connection = sqlite3.connect("users.db")
            cursor = connection.cursor()

            # –ù–∞—Ö–æ–¥–∏–º —É–±–ª—é–¥–∫–∞ –ø–æ –µ–≥–æ username, –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ rules –Ω–∞ False
            sql = """
                        UPDATE white_list 
                        SET rules = 'False' 
                        WHERE user_name=?
                        """
            cursor.execute(sql, [user_name])
            fetch_id = cursor.fetchone()

            connection.commit()
            print(f"–§–µ—Ç—á –∞–π–¥–∏ {fetch_id} .")
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} –∑–∞–±–∞–Ω–µ–Ω.")

        else:
            if message.text == 'üì≤' and message.chat.id == 441945234:
                # –û–ø–ª–∞—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                send_mobile(api_access_token, '1', '9187289906', '–û–ø–ª–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞', '1')
                print(f"–í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å, {message.chat.first_name}")
            elif message.text == 'üí∞' and message.chat.id == 441945234:
                # –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã
                balances = balance(my_login, api_access_token)['accounts']
                bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balances[0]['balance']['amount']} ‚ÇΩ")
            elif message.text == 'üåª':
                # –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
                def get_fibonacci_number(message):  # –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ
                    global number;
                    number = message.text;
                    if number.isdigit() == True:
                        result_fibonacci = fibonacci(int(number))
                        fib_number = list(result_fibonacci)[0]
                        fib_number = str(fib_number)
                        fib_number = fib_number.replace('[', '').replace(']', '')
                        print(fib_number)
                        fib_sequence = list(result_fibonacci)[1]
                        fib_sequence = str(fib_sequence)
                        fib_sequence = fib_sequence.replace('[', '').replace(']', '')
                        print(fib_sequence)
                        # –í—Å—ë —ç—Ç–æ –±–µ–∑–æ–±—Ä–∞–∑–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ —Ç–µ–∫—Å—Ç/—á–∏—Å–ª–æ
                        bot.send_message(message.chat.id, f"{number} - –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏: \n"
                                                         f"{fib_number}\n"
                                                        f"–ó–æ–ª–æ—Ç—ã–º —Å–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ: "
                                                        f"{fib_sequence}")

                        keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                        key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
                        keyboard.add(key_yes)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
                        keyboard.add(key_no)

                        bot.send_message(message.from_user.id, text=f"–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è?",
                                         reply_markup=keyboard)

                    else:
                        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                        bot.register_next_step_handler(message, get_fibonacci_number)
                        # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name

                @bot.callback_query_handler(func=lambda call: True)
                def callback_worker(call):
                    if call.data == "yes":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
                        bot.send_message(call.message.chat.id, '–ö–ª–∞—Å—Å–Ω–æ! : )')
                    elif call.data == "no":
                        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!")
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏"
                                                  " –∏ –µ–≥–æ –∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ üôÇ")
                bot.register_next_step_handler(message, get_fibonacci_number)
                # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name


            else:
                bot.send_message(message.chat.id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")


    else:
        m_list = []
        total_say_unban = 0

        for i in range(len(say_unban)):
            index_diff = similarity(message.text.split('@')[0].strip(), say_unban[i])
            m_list.append(index_diff)
            total_say_unban = max(m_list)

        if (total_say_unban > 0.80) and message.chat.id == 441945234:
            user_name = message.text.split('@')[1].strip()

            # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>
            connection = sqlite3.connect("users.db")
            cursor = connection.cursor()

            # –ù–∞—Ö–æ–¥–∏–º —É–±–ª—é–¥–∫–∞ –ø–æ –µ–≥–æ username, –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ rules –Ω–∞ True
            sql = """
                                        UPDATE white_list 
                                        SET rules = 'True' 
                                        WHERE user_name=?
                                        """
            cursor.execute(sql, [user_name])
            fetch_id = cursor.fetchone()

            connection.commit()
            print(f"–§–µ—Ç—á –∞–π–¥–∏ {fetch_id} .")
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

        else:
            print("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤")
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. \n–î–ª—è —Ä–∞–∑–±–∞–Ω–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @sabolch")


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª 24/7
if __name__ == '__main__':
    bot.polling(none_stop=True, timeout=123)
